#!/bin/env python
"""
Lets you set bspwm settings using a rofi prompt

TODO: colors don't change for some reason
"""

from subprocess import run, PIPE
from rofi import Rofi
from enum import Enum, auto

r : Rofi = Rofi()

def color_validator(s):
    if len(s) == 6: 
        return f'"#{s}""', None

    if s[0] == '#' and len(s) == 7:
        return f'"{s}"', None

    else: 
        return None, 'Not a valid color'

def color(): 
    return lambda prompt: r.generic_entry(
        prompt, 
        validator=color_validator
    )

def bool(): 
    def func(prompt):
        idx, key = r.select(prompt, ['Yes', 'No'], rofi_args=['-i'])
        if key == -1:
            return None
        if idx == 0:
            return 'true'
        else: 
            return 'false'
    return func

def num(min=None, max=None):
    def func(prompt):
        return str(r.integer_entry(prompt, min=min, max=max))
    return func
    
def options(*option_list):
    def func(prompt):
        idx, key = r.select(prompt, option_list, rofi_args=['-i'])
        if key == -1: return None
        return option_list[idx]
    return func

bspwm_options = dict(
    normal_border_color=color(),
    active_border_color=color(),
    focused_border_color=color(),
    presel_feedback_color=color(),
    split_ratio=num(),
    initial_polarity=options('first_child', 'second_child'),
    directional_focus_tightness=options('high', 'low'),
    borderless_monocle=bool(),
    gapless_monocle=bool(),
    top_monocle_padding=num(min=0),
    right_monocle_padding=num(min=0),
    bottom_monocle_padding=num(min=0),
    left_monocle_padding=num(min=0),
    single_monocle=bool(),
    pointer_motion_interval=num(min=0),
    pointer_modifier=options(
        'shift', 'control', 'lock', 'mod1', 'mod2', 'mod3', 'mod4', 'mod5'),
    click_to_focus=options(
        'button1', 'button2', 'button3', 'any', 'none'
    ),
    swallow_first_click=bool(),
    focus_follows_pointer=bool(),
    pointer_follows_focus=bool(),
    pointer_follows_monitor=bool(),
    mapping_events_count=num(),
    ignore_ewmh_focus=bool(),
    ignore_ewmh_fullscreen=options(
        'all', 'none', 'enter', 'exit', 'enter,exit'
    ),
    center_pseudo_tiled=bool(),
    honor_size_hints=bool(),
    remove_disabled_monitors=bool(),
    remove_unplugged_monitors=bool(),
    merge_overlapping_monitors=bool(),
    top_padding=num(),
    right_padding=num(),
    bottom_padding=num(),
    left_padding=num(),
    window_gap=num(),
    border_width=num(),
)

if __name__ == '__main__':
    index, key = r.select('Settings', bspwm_options.keys())

    if (key == -1):
        raise SystemExit(0)

    name, select_func = list(bspwm_options.items())[index]
    current_value = run(['bspc', 'config', name], stdout=PIPE).stdout.decode().strip()

    choice = select_func(f'{name} ({current_value})')
    if choice == None:
        raise SystemExit(0)

    args = ['bspc', 'config', name, choice]
    run(args)
