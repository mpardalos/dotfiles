#!/bin/sh

BONCLAY_VER="1.1.0"
DISTRO_NAME=$(lsb_release -ds 2>/dev/null \
    || cat /etc/*release 2>/dev/null | head -n1 | sed -n 's/^NAME="\(.*\)"/\1/p' \
    || uname -om)

get_bonclay() {
    echo "Downloading bonclay... "
    curl \
        --silent \
        --location\
        --output bonclay.tar.gz\
        https://github.com/talal/bonclay/releases/download/v$BONCLAY_VER/bonclay-$BONCLAY_VER-linux_amd64.tar.gz
    tar -xvzf bonclay.tar.gz >/dev/null 2>&1
    rm bonclay.tar.gz
    chmod u+x bonclay
    echo "Done"
}

install_symlinks() {
    ! [ -f ./bonclay ] && get_bonclay
    ./bonclay sync ./bonclay.conf.yaml
}

yes_no_prompt() {
    # Defaults to yes
    printf "$1 [Y/n] "
    read choice
    case "$choice" in
        N|n ) return 1;;
        * ) return 0;;
    esac
}

install_all_deps() {
    ALL_DEPS=""

    for installer in $INSTALLERS; do
        ALL_DEPS="$ALL_DEPS $( . $installer; echo $MAKE_DEPENDS $DEPENDS )"
    done

    sudo pacman -S --needed $ALL_DEPS
}


main() {
    install_symlinks

    for installer in $INSTALLERS; do
        NAME=$(dirname $installer | xargs basename)
        echo "===== Installing $NAME ====="
        # Source the installer to get $MAKEDEPENDS, $DEPENDS, and install()
        # Do it in a subshell (the ()) so that they are lost on following iterations
        # (i.e. so that different installers don't interfere with eachother)
        ( . $installer

          RUN_INSTALLER=true

          if [ "$MAKEDEPENDS" != "" ] || [ "$DEPENDS" != "" ]; then
              echo
              echo "==> Installing required packages"

              # Try to install with pacman and if that fails then detect the error
              sudo pacman -S --needed --noconfirm $MAKEDEPENDS $DEPENDS || {
                  echo "==> Error: Couldn't install required packages"
                  if [ "$DISTRO_NAME" != "Arch Linux" ]; then
                      echo "==> Required packages were found but current distro is not Arch Linux. "
                      echo "==> The install script only knows how to install packages on Arch."
                  fi
                  echo "==> The required packages were:"
                  echo "==> MAKEDEPENDS: "
                  for dep in $MAKEDEPENDS; do echo "==> * $dep"; done
                  echo "==> DEPENDS: "
                  for dep in $DEPENDS; do echo "==> * $dep"; done

                  # Can't use continue because we're in a subshell
                  yes_no_prompt "Continue with installer for $NAME?" || RUN_INSTALLER=false
              }
          fi

          if $RUN_INSTALLER ; then
              type module_install >/dev/null 2>&1 && {
                  echo
                  echo "==> Running install script"
                  module_install
              }
          fi

        )

        echo
        echo "===== $NAME Done ====="
        echo
    done
}

# Find the command and shift it out of the parameters
case $1 in
    deps|help) COMMAND=$1; shift;;
    *) COMMAND=main;;
esac

# Find the installers matching the patterns provided
MODULE_PATTERNS=$@
if [ "$MODULE_PATTERNS" = "" ]; then
    INSTALLERS=$(find -name install.sh)
else
    INSTALLERS=$(find -name install.sh | grep $(echo $MODULE_PATTERNS | sed 's/^| / -e /g'))
fi
if [ "$INSTALLERS" = "" ]; then
    echo "==> No modules match $MODULE_PATTERNS"
    echo "==> Stopping"
    exit 1
fi

# Run the appropriate command
case $COMMAND in
    deps) install_all_deps;;
    help)
      printf "Usage: $0 <COMMAND> [MODULES...]\n"
      printf "\n"
      printf "Install the dotfiles (or part of them)\n"
      printf "\n"
      printf "Commands:\n"
      printf "  deps\t\t Only install the required packages\n"
      printf "  help\t\t Show this help message\n"
      ;;
    *) main;;
esac
