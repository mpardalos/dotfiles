#+TITLE: Michalis Pardalos' Emacs config

* Base
This is the config that applies to all of emacs, regardless of mode.
** Visuals
#+begin_src elisp
(use-package! auto-dark
  :custom
  (auto-dark-dark-theme 'doom-lantern)
  (auto-dark-light-theme 'doom-one-light)
  :config
  (auto-dark-mode t))
#+end_src

I like having a transparent background. Unfortunately this only works with Emacs 30+ (currently only on HEAD)
#+begin_src elisp
(add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

Set both a monospace and a proportional font
#+begin_src elisp
(setq!
 doom-font (font-spec :family "Fira Code" :weight 'semi-bold :size 16)
 doom-variable-pitch-font (font-spec :family "Quicksand" :weight 'medium))
#+end_src

Don't highlight the current line. I just find it distracting.
#+begin_src elisp
(setq! global-hl-line-modes ())
#+end_src

** Tweaks
Save on entering evil normal state
#+begin_src elisp
(add-hook 'evil-normal-state-entry-hook
          (lambda ()
            (if buffer-file-name
                (save-buffer)
              (message "Current buffer is unnamed"))))
#+end_src

Line numbers slow down typing. There is a binding to turn them on when needed.
#+begin_src elisp
(setq! display-line-numbers-type nil)
#+end_src

Start with a completely empty buffer. This is actually faster than starting with e.g. ~fundamental-mode~
#+begin_src elisp
(setq! +doom-dashboard-functions '())
#+end_src

This needs to be enabled to keep track of recent files.
#+begin_src elisp
(recentf-mode)
#+end_src

Make it so that entering and exiting insert state keeps the cursor in place
#+begin_src elisp
(setq! evil-move-cursor-back nil)
#+end_src

Change up how dired displays items.
#+begin_src elisp
(setq! dired-listing-switches "-ABhl -X --group-directories-first")

(defun dired-dotfiles-toggle ()
    "Show/hide dot-files"
    (interactive)
    (when (equal major-mode 'dired-mode)
      (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p) ; if currently showing
	  (progn
	    (set (make-local-variable 'dired-dotfiles-show-p) nil)
	    (message "h")
	    (dired-mark-files-regexp "^\\\.")
	    (dired-do-kill-lines))
	(progn (revert-buffer) ; otherwise just revert to re-show
	       (set (make-local-variable 'dired-dotfiles-show-p) t)))))
#+end_src

*** Popups
Place terminal on the right
#+begin_src elisp
(set-popup-rule! "^\\*doom:\\(?:v?term\\|eshell\\)-popup"
  :vslot -5
  :size 0.4
  :select t
  :modeline t
  :quit 'current
  :ttl nil
  :side 'right)
#+end_src

Place compilation on the right
#+begin_src elisp
(set-popup-rule! "^\\*compilation\\*"
  :vslot -4
  :size 0.4
  :select t
  :modeline t
  :quit 'current
  :ttl nil
  :side 'right)
#+end_src


** Keybindings
Set up the leader keys first.
#+begin_src elisp
(setq! doom-leader-key "SPC"
       doom-localleader-key "SPC SPC")
#+end_src

#+begin_src elisp
(map! :leader
      :desc "Universal Argument" "u" #'universal-argument)

(map! :map override
      :n ";" 'evil-ex)

(map! :desc "Where is the cursor" "C-x w" #'+nav-flash/blink-cursor)

(map! :map 'evil-window-map
      :desc "Window hydra" "SPC" #'+hydra/window-nav/body)

;; dired-jump in other window, or in current window with prefix arg
(map! :desc "Dired" "C-x C-j"
      (cmd! (dired-jump (not current-prefix-arg))))
(map! :mode +doom-dashboard-mode
      :desc "Dired" "C-x C-j"
      (cmd! (dired-jump current-prefix-arg)))

(map! :desc "Search in file" :leader "j" #'consult-line)
#+end_src

Switching buffers. I use the mouse back and forward keys as a secondary choice. Nice when flicking through buffers quickly.
#+begin_src elisp
(map! :n "M-u" 'previous-buffer
      :n "M-i" 'next-buffer
      :g "<mouse-8>" 'previous-buffer
      :g "<mouse-9>" 'next-buffer)
#+end_src

Dired
#+begin_src elisp
(map! :mode dired-mode
      :n "h" #'dired-up-directory
      :n "l" #'dired-find-file)

#+end_src

Various toggles
#+begin_src elisp
(map! :leader
      :prefix ("t" . "Toggles")
      :desc "Visual line mode"             "v" (cmd!! #'visual-line-mode)
      :desc "Server"                       "S" (cmd!! #'server-mode)
      :desc "Flyspell"                     "s" #'flyspell-mode
      :desc "Flycheck list"                "f" #'flycheck-list-errors
      :desc "Line numbers"                 "l" #'doom/toggle-line-numbers
      :desc "Frame fullscreen"             "F" #'toggle-frame-fullscreen
      :desc "Big mode"                     "b" #'doom-big-font-mode
      :desc "Evil goggles"                 "g" #'evil-goggles-mode
      :desc "Whitespace visualisation"     "w" #'whitespace-mode)

#+end_src

Projects
#+begin_src elisp
(map! :leader :prefix ("p" . "project")
      :desc "Switch project"               "p" #'projectile-switch-project
      :desc "Kill project buffers"         "k" #'projectile-kill-buffers
      :desc "Remove known project"         "d" #'projectile-remove-known-project
      :desc "Add new project"              "a" #'projectile-add-known-project
      :desc "Edit project .dir-locals"     "e" #'projectile-edit-dir-locals
      :desc "Save project files"           "s" #'projectile-save-project-buffers

      :desc "Find file in other project"   "F" #'doom/find-file-in-other-project
      :desc "Find file in project"         "f" #'projectile-find-file
      :desc "Find other file"              "o" #'projectile-find-other-file
      :desc "Find recent project files"    "R" #'projectile-recentf
      :desc "List project tasks"           "T" #'magit-todos-list
      :desc "Run cmd in project root"      "!" #'projectile-run-shell-command-in-root
      :desc "Switch to project buffer"     "b" #'projectile-switch-to-buffer
      :desc "Switch to scratch buffer"     "X" #'doom/switch-to-project-scratch-buffer
      :desc "Pop up scratch buffer"        "x" #'doom/open-project-scratch-buffer
      :desc "Invalidate project cache"     "i" #'projectile-invalidate-cache
      :desc "Search in project"            "s" #'+vertico/project-search)
#+end_src

Files
#+begin_src elisp
(map! :leader :prefix ("f" . "File")
      :desc "Recent Files" "r" #'recentf-open-files
      :desc "Project Files" "p" #'projectile-find-file
      :desc "Find under current directory" "f" #'+default/find-file-under-here)
#+end_src

Shortcuts to often-accessed directories
#+begin_src elisp
(map! :leader :prefix ("d" . "Directory")
      :desc "Dotfiles" "c" (cmd! () (find-file "~/.config/dotfiles"))
      :desc "PhD" "p" (cmd! () (find-file "~/Documents/PhD"))
      :desc "ITSynergy" "i" (cmd! () (find-file "~/Documents/ITSynergy")))
#+end_src

Evil
#+begin_src elisp
(map! :n "gc" #'evilnc-comment-operator
      :v "S" #'evil-surround-region
      :o "s" #'evil-surround-edit)
#+end_src

Font size
#+begin_src elisp
(map! :n "C--" #'doom/decrease-font-size
      :n "C-=" #'doom/increase-font-size
      :n "C-0" #'doom/reset-font-size)
#+end_src

Run
#+begin_src elisp
(map! :leader
      :prefix ("r" . "Run")
      :desc "Run file or project" "r" (cmd! () (if (projectile-project-p) (call-interactively #'projectile-run-project) (+eval/buffer)))
      (:mode 'projectile-mode
       :prefix ("p" . "Project")
       :desc "Test project"               "t" #'projectile-test-project
       :desc "Compile in project"         "c" #'projectile-compile-project
       :desc "Configure project"          "g" #'projectile-configure-project
       :desc "Repeat last command"        "C" #'projectile-repeat-last-command
       :desc "Pop to compilation buffer"  "b" (cmd! () (if (get-buffer "*compilation*") (pop-to-buffer "*compilation*") (message "No *compilation* buffer")))))
#+end_src

* Tools
** Git
Keybindings
#+begin_src elisp
(map! :leader
      :prefix ("g" . "VCS")
      :desc "Blame annotations" "b" #'magit-blame
      :desc "Commit"            "c" #'magit-commit
      :desc "HEAD log"          "l" #'magit-log-head
      :desc "Magit status"      "g" #'magit-status
      :desc "Revert hunk"       "u" #'git-gutter:revert-hunk
      :desc "Stage hunk"        "s" #'git-gutter:stage-hunk
      :desc "Stage file"        "S" #'magit-stage-file
      :desc "Checkout"          "o" #'magit-checkout
      :desc "Git Timemachine"   "t" #'git-timemachine
      :desc "Smerge"            "m" #'+vc/smerge-hydra/body)

(map! :desc "Previous Hunk"  :n "[g" 'git-gutter:previous-hunk
      :desc "Next hunk"      :n "]g" 'git-gutter:next-hunk)

(map! :mode git-timemachine
      :n "[["  #'git-timemachine-show-previous-revision
      :n "]]"  #'git-timemachine-show-next-revision
      :n "q"   #'git-timemachine-quit
      :n "gb"  #'git-timemachine-blame)
#+end_src

For ~magit-blame~, show the blame annotations on the left margin. I don't like how the other modes break up the flow of the code with the annotations.
#+begin_src elisp
(setq! magit-blame-echo-style 'margin)
#+end_src

Add some git forges I might use to ~forge~'s list
#+begin_src elisp
(after! forge
  (add-to-list 'forge-alist
               '("gitlab.haskell.org"
                 "gitlab.haskell.org/api/v4"
                 "gitlab.haskell.org"
                 forge-gitlab-repository)))
#+end_src
** Spell check
Keybindings
#+begin_src elisp
(map! :desc "Previous spelling error" :n "[s" #'evil-prev-flyspell-error
      :desc "Next spelling error"     :n "]s" #'evil-next-flyspell-error)
#+end_src

Add the greek dictionary
#+begin_src elisp
(add-hook! spell-fu-mode
  (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary "el")))
#+end_src
** Terminal
I just use vterm. I used to use eshell occasionally, but I found a plain terminal is usually what I want.
#+begin_src elisp
(setq! vterm-shell "/bin/fish")
(map! :leader
      :desc "Terminal" "c" #'+vterm/toggle)
#+end_src
** Company
Reduce strain from company completion. Make completion only show up when manually triggered (~C-x C-o~)
#+begin_src elisp
(setq! company-idle-delay nil)
#+end_src
** Emacs-conflict
This package is used to resolve conflicts due to syncthing, which I use to sync my org-roam and bibliography files.
#+begin_src elisp
(use-package! emacs-conflict)
#+end_src
* Prose
** Org mode
#+begin_src elisp
(setq! org-todo-keywords
       '((sequence
          "TODO(t)" "MAYBE(m)" "WIP(p)" "SCHEDULED(s)"
          "|" "WAIT(w)" "DONE(d)" "CANCEL(c)"))
       org-plantuml-exec-mode 'plantuml)
#+end_src

Doom changes this. Set it back to the default
#+begin_src elisp
(setq! org-attach-id-dir "data/")
#+end_src

I like writeroom-mode, but only for writing prose, so I only enable it for org-mode.
#+begin_src elisp
(setq! writeroom-major-modes '(org-mode))
(global-writeroom-mode 1)
#+end_src

Use ~ace-window~ to choose the window to open links in
#+begin_src elisp
(after! org
  (setf (alist-get 'file org-link-frame-setup) #'my/find-file-ace))

(defun my/find-file-ace (filename)
  (interactive "F")
  (require 'ace-window)
  (let ((aw-dispatch-when-more-than 1))
    (ace-window nil)
    (find-file filename)))
#+end_src

Open pdf links inside emacs
#+begin_src elisp
(after! org (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs)))
#+end_src

Disable completion in org mode. It's annoying in prose but I would like to have it in code blocks.
#+begin_src elisp
(after! org (set-company-backend! 'org-mode nil))
#+end_src

Shrink block delimiters. Makes documents with lots of blocks cleaner.
#+begin_src elisp
(after! org
  (set-face-attribute 'org-block-begin-line nil :height 0.6))
#+end_src

Reasonable default for image size. Half a screen width on a 1080p screen.
#+begin_src elisp
(after! org
  (setq! org-image-actual-width '(960)))
#+end_src

** org-roam
Keybindings
#+begin_src elisp
(map! :leader
      :desc "Notes (org-roam)" "n" #'org-roam-node-find)
(map! :mode org-mode
      :localleader
      :prefix "m"
      :desc "Find file"                  "f" #'org-roam-node-find
      :desc "Show ui"                    "u" #'org-roam-ui-mode
      :desc "Org roam buffer"            "n" #'org-roam-buffer-toggle
      :desc "Insert link"                "i" #'org-roam-node-insert
      :desc "Publish note to site"       "p" #'mpardalos/org-roam-hugo-publish-and-magit)
#+end_src

#+begin_src elisp
(setq! org-roam-directory "~/Documents/org-roam"
       org-roam-file-exclude-regexp ".stversions/"
       org-roam-ui-sync-theme t
       org-roam-ui-follow t
       org-roam-ui-update-on-save t
       org-roam-ui-open-on-start t)
#+end_src

This setting has to be deferred because it causes org-mode to load, slowing down startup *a lot*
#+begin_src elisp
(after! org-roam
  org-id-extra-files (org-roam-list-files))
#+end_src

This is needed for ~org-roam-ui~
#+begin_src elisp
(use-package! websocket :after org-roam)
#+end_src

*** Exporting to hugo
Exporting to hugo:
#+begin_src elisp
(setq! org-hugo-base-dir "/home/mpardalos/Documents/mpardalos.com"
       org-hugo-section "brain")
#+end_src

Advise org-hugo so that it uses the ~optionalref~ shortcode instead of ~relref~.  This is needed for the export of my org-roam notes, since I will not export all of them to hugo, and using relref would cause errors in the hugo export.  The ~optionalref~ shortcode is defined in hugo to instead just tag the link as broken if the page it links to has not been exported.

See the "Personal Website" org-roam note
#+begin_src elisp
(defvar mpardalos/org-hugo-relref-shortcode "optionalref"
  "The hugo shortcode to use for references. org-hugo uses 'relref' by default")

(defun mpardalos/org-hugo-use-alternative-relref (f &rest args)
  (replace-regexp-in-string
   "\\[\\(.*?\\)\\]({{< relref \"\\(.*?\\)\" >}})"
   (format "{{< %s \"\\1\" \"\\2\" >}}" mpardalos/org-hugo-relref-shortcode)
   (apply f args)))

(advice-add 'org-hugo-link :around #'mpardalos/org-hugo-use-alternative-relref)

(defun mpardalos/org-roam-hugo-publish-all ()
  "Export all org-roam files tagged with :publish: using ox-hugo to my hugo site"
  (interactive)
  (setq org-id-extra-files (org-roam-list-files)) ; Refresh the list of files that org-mode can find by id
  (dolist (fil (org-roam--list-files org-roam-directory))
    (with-current-buffer (find-file-noselect fil)
      (if (member "publish" (org-get-tags)) (org-hugo-export-wim-to-md))
      (kill-buffer)))
  (mpardalos/org-roam-hugo-publish-graph)
  (magit-status org-hugo-base-dir))

(defun mpardalos/org-roam-hugo-publish-and-magit ()
  "Publish the current org-roam note and then jump to the magit buffer for your website"
  (interactive)
  (org-roam-tag-add '("publish"))
  (org-hugo-export-wim-to-md)
  (magit-status org-hugo-base-dir))

(defun mpardalos/org-roam-hugo-publish-graph ()
  "Export the org-roam graph and publish it to my hugo site"
  (interactive)
  (org-roam-db-sync)
  (shell-command (format "org-roam-graph-export > %s/static/brain-graph.json" org-hugo-base-dir)))
#+end_src

** Bibliography/Research
The bibliography file is used a few times, so I set it here once and re-use it.
#+begin_src elisp
(setq! my/bibliography-file "~/Documents/bibliography/bibliography.bib")
#+end_src

#+begin_src elisp
(map! :leader :prefix ("b" . "Bibliography")
      :desc "Bibliography"           "b" #'citar-open
      :desc "Open bibliography file" "f" #'my/find-bibliography-file)

(defun my/find-bibliography-file ()
  (interactive)
  (find-file my/bibliography-file))
#+end_src


*** Bibtex
#+begin_src elisp
(setq! bibtex-completion-bibliography `(,my/bibliography-file)
       bibtex-completion-library-path '("~/Documents/bibliography/pdfs")
       bibtex-completion-notes-path "~/Documents/bibliography/notes.org"
       bibtex-completion-additional-search-fields '("tags"))
#+end_src

*** Citar
#+begin_src elisp
(setq! citar-bibliography `(,my/bibliography-file)
       citar-library-paths '("~/Documents/bibliography/pdfs")
       citar-notes-paths '("~/Documents/bibliography/notes")
       citar-org-roam-note-title-template "${title} (${year}) (${author editor})")
#+end_src

** LaTeX
#+begin_src elisp
(setq! +latex-viewers '(pdf-tools zathura)
       LaTeX-item-indent 2
       LaTeX-beamer-item-overlay-flag nil
       TeX-master "shared")

(add-hook! LaTeX-mode (auto-fill-mode -1))
#+end_src
* Programming
** General
#+begin_src elisp
(map! :mode prog-mode
      :localleader
      :desc "Format region or buffer" "f" #'+format/region-or-buffer)
#+end_src

** Tree-sitter
I just don't find it useful, and it just uses too many colours which gets distracting
#+begin_src elisp
(setq +tree-sitter-hl-enabled-modes '())
#+end_src
** General LSP
#+begin_src elisp
(setq! lsp-ui-sideline-enable nil
       lsp-ui-doc-position 'top
       lsp-lens-auto-enable nil
       lsp-eldoc-enable-hover nil
       lsp-auto-guess-root 't)
#+end_src

Keybindings
#+begin_src elisp
(map! :mode lsp-mode
      (:localleader
       :desc "Rename symbol" "r" #'lsp-rename
       :desc "Code action"   "a" #'lsp-execute-code-action
       :desc "Find symbol"  "s" #'consult-lsp-symbols)

      :desc "Glance documentation"  :n "gh" #'lsp-ui-doc-glance
      :desc "Go to type definition" :n "gt" #'lsp-goto-type-definition)
#+end_src

** DAP
Make sure that, when debugging a terminal program, it uses an emacs terminal
#+begin_src elisp
(setq! dap-default-terminal-kind "integrated")
#+end_src

#+begin_src elisp
(setq! dap-auto-configure-mode 't)
#+end_src
** Flycheck
#+begin_src elisp
;; (map! :desc "Previous Error"  :n "[e" #'+spell/previous-error
;;       :desc "Next Error"      :n "]e" #'+spell/next-error)
#+end_src

Slightly speed up flycheck by only highlighting symbols, not individual characters.
#+begin_src elisp
(setq! flycheck-highlighting-mode 'symbols)
#+end_src
** Web
I prefer using tabs for HTML and CSS
#+begin_src elisp
(add-hook! web-mode
  (indent-tabs-mode)
  (web-mode-use-tabs))
#+end_src
** Coq
Workaround for a bug
#+begin_src elisp
(setq! coq-show-proof-diffs-regexp "")
#+end_src

Disable response buffer
#+begin_src elisp
(setq! proof-three-window-enable nil)
#+end_src

Fix for slow startup
#+begin_src elisp
(after! core-editor
  (add-to-list 'doom-detect-indentation-excluded-modes 'coq-mode))
#+end_src

Keybindings
#+begin_src elisp
(map! :mode coq-mode
      :desc "Proof go to point" "C-c C-c" #'company-coq-proof-goto-point
      :desc "Interrupt proof" "C-c C-k" #'proof-interrupt-process)
#+end_src
** Haskell
#+begin_src elisp
(setq! lsp-haskell-process-path-hie "haskell-language-server-wrapper"
       haskell-interactive-popup-errors nil)
#+end_src

~smartparens-mode~ is useless in haskell and makes everything too slow. Just disable it
#+begin_src elisp
(add-hook! 'haskell-mode-hook (smartparens-mode -1))
#+end_src
** Alloy
#+begin_src elisp
(setq! alloy-mode-map (make-sparse-keymap)
       alloy-basic-offset 2)

(setq-hook! alloy-mode
  indent-tabs-mode nil)
#+end_src
** Dafny
#+begin_src elisp
(setq! flycheck-dafny-executable "~/.local/share/dafny/dafny"
       flycheck-boogie-executable "~/.local/share/dafny/dafny-server"
       flycheck-z3-smt2-executable "z3"
       flycheck-inferior-dafny-executable "~/.local/share/dafny/dafny-server")
#+end_src

** Kima
[[https://kima.xyz][Kima]] is a programming language I was working on in the past. I have added a very simple mode for it, which includes a configuration for ~quickrun~.
#+begin_src elisp
(define-generic-mode 'kima-mode
  '("#")
  '("fun" "data" "True""False" "let""var" "while""if" "else" "effect" "handle" "with" "IO" "Unit")
  nil
  '(".k\\'")
  "Major mode for the kima programming language")

(quickrun-add-command "kima"
  '((:command . "kima")
    (:exec . "%c run %s"))
  :mode 'kima-mode)
#+end_src
** Ansible
#+begin_src elisp
(setq-hook! ansible yaml-indent-offset 2)
#+end_src
** GMPL
#+begin_src elisp
(add-to-list 'auto-mode-alist
             '("\\.mod\\'" . gmpl-mode))
#+end_src
** Vimrc
Because every now and then you remember that evil mode was based on an actual program called vim.
#+begin_src elisp
(add-to-list 'auto-mode-alist
             '("\\.vim\\(rc\\)?\\'" . vimrc-mode))
#+end_src
